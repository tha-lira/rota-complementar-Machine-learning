# ----------------------------------------------------
# ‚ú® Bibliotecas Importadas 
# ----------------------------------------------------

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

# ----------------------------------------------------
# 0. CARREGAR DADOS
# ----------------------------------------------------

df = pd.read_csv(r'C:\Users\Thais Lira\Documents\rota-complementar-Machine-learning\dados\rh_data.csv')

# ----------------------------------------------------
# 1. IDENTIFICA√á√ÉO DE VALORES NULOS
# ----------------------------------------------------

print("\nüîç Verificando valores nulos por coluna:\n")
print(df.isnull().sum())

# ----------------------------------------------------
# 2. IDENTIFICA√á√ÉO DE DADOS DUPLICADOS
# ----------------------------------------------------

duplicados = df.duplicated().sum()
print(f"\nüìå Total de linhas duplicadas: {duplicados}")

# ----------------------------------------------------
# 3. AN√ÅLISE DE VARI√ÅVEIS CATEG√ìRICAS
# ----------------------------------------------------

# Identifica colunas do tipo 'object' (categ√≥ricas n√£o codificadas)
categorical_cols = df.select_dtypes(include='object').columns

print("\nüîé Valores √∫nicos por coluna categ√≥rica:\n")
for col in categorical_cols:
    print(f"Coluna: {col}")
    print(df[col].unique())
    print("-" * 40)

# ----------------------------------------------------
# 4. AN√ÅLISE DE VARI√ÅVEIS NUM√âRICAS E DETEC√á√ÉO DE OUTLIERS
# ----------------------------------------------------

# Seleciona colunas num√©ricas
numericas = df.select_dtypes(include=[np.number])

# Fun√ß√£o para detectar outliers com dois m√©todos
def detectar_outliers(coluna):
    dados = numericas[coluna]

    # --- M√âTODO 1: Desvio Padr√£o (¬±3œÉ)
    media = dados.mean()
    desvio = dados.std()
    limite_inferior_std = media - 3 * desvio
    limite_superior_std = media + 3 * desvio
    outliers_std = dados[(dados < limite_inferior_std) | (dados > limite_superior_std)]

    # --- M√âTODO 2: IQR
    Q1 = dados.quantile(0.25)
    Q3 = dados.quantile(0.75)
    IQR = Q3 - Q1
    limite_inferior_iqr = Q1 - 1.5 * IQR
    limite_superior_iqr = Q3 + 1.5 * IQR
    outliers_iqr = dados[(dados < limite_inferior_iqr) | (dados > limite_superior_iqr)]

    # Resultado
    print(f"\nüìå Vari√°vel: {coluna}")
    print(f"  - M√©dia: {media:.2f} | Desvio Padr√£o: {desvio:.2f}")
    print(f"  - Limites (¬±3œÉ): {limite_inferior_std:.2f} a {limite_superior_std:.2f}")
    print(f"  - Outliers (¬±3œÉ): {len(outliers_std)} valores")
    print(f"  - Limites (IQR): {limite_inferior_iqr:.2f} a {limite_superior_iqr:.2f}")
    print(f"  - Outliers (IQR): {len(outliers_iqr)} valores")

print("\nüìâ An√°lise de Outliers nas vari√°veis num√©ricas:\n")
for coluna in numericas.columns:
    detectar_outliers(coluna)
